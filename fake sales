<?php
/**
 * Plugin Name: AVIF Image Optimizer for WoodMart
 * Description: Optimizes images by converting to AVIF with WebP and JPEG/PNG fallbacks.
 * Version: 1.0.0
 * Author: Your Name
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('AVIF_OPTIMIZER_VERSION', '1.0.0');
define('AVIF_OPTIMIZER_PATH', plugin_dir_path(__FILE__));
define('AVIF_OPTIMIZER_URL', plugin_dir_url(__FILE__));

// Activation hook
register_activation_hook(__FILE__, 'avif_optimizer_activate');
function avif_optimizer_activate() {
    // Set default options
    if (!get_option('avif_optimizer_settings')) {
        $default_settings = array(
            'enable_avif' => 1,
            'enable_webp' => 1,
            'compression_level' => 'balanced',
            'batch_size' => 20
        );
        update_option('avif_optimizer_settings', $default_settings);
    }
}

// Add admin menu
add_action('admin_menu', 'avif_optimizer_add_admin_menu');
add_action('admin_init', 'avif_optimizer_settings_init');

function avif_optimizer_add_admin_menu() {
    add_submenu_page(
        'woodmart_options',  // This makes it appear under WoodMart settings
        'AVIF Optimizer',
        'AVIF Optimizer',
        'manage_options',
        'avif-image-optimizer',
        'avif_optimizer_settings_page'
    );
}

function avif_optimizer_settings_init() {
    register_setting('avif_optimizer_settings_group', 'avif_optimizer_settings');
    
    add_settings_section(
        'avif_optimizer_settings_section',
        'AVIF Optimization Settings',
        'avif_optimizer_settings_section_callback',
        'avif-image-optimizer'
    );
    
    add_settings_field(
        'enable_avif',
        'Enable AVIF Generation',
        'avif_checkbox_render',
        'avif-image-optimizer',
        'avif_optimizer_settings_section',
        array('name' => 'enable_avif')
    );
    
    add_settings_field(
        'enable_webp',
        'Enable WebP Generation',
        'avif_checkbox_render',
        'avif-image-optimizer',
        'avif_optimizer_settings_section',
        array('name' => 'enable_webp')
    );
    
    add_settings_field(
        'compression_level',
        'Compression Level',
        'avif_compression_render',
        'avif-image-optimizer',
        'avif_optimizer_settings_section'
    );
    
    add_settings_field(
        'batch_size',
        'Batch Size',
        'avif_batch_size_render',
        'avif-image-optimizer',
        'avif_optimizer_settings_section'
    );
}

function avif_checkbox_render($args) {
    $options = get_option('avif_optimizer_settings');
    $name = $args['name'];
    ?>
    <input type="checkbox" name="avif_optimizer_settings[<?php echo $name; ?>]" value="1" <?php checked(isset($options[$name]) ? $options[$name] : 0, 1); ?>>
    <?php
}

function avif_compression_render() {
    $options = get_option('avif_optimizer_settings');
    $compression = isset($options['compression_level']) ? $options['compression_level'] : 'balanced';
    ?>
    <select name="avif_optimizer_settings[compression_level]">
        <option value="lossless" <?php selected($compression, 'lossless'); ?>>Lossless</option>
        <option value="balanced" <?php selected($compression, 'balanced'); ?>>Balanced</option>
        <option value="lossy" <?php selected($compression, 'lossy'); ?>>Lossy</option>
    </select>
    <?php
}

function avif_batch_size_render() {
    $options = get_option('avif_optimizer_settings');
    $batch_size = isset($options['batch_size']) ? $options['batch_size'] : 20;
    ?>
    <input type="number" name="avif_optimizer_settings[batch_size]" value="<?php echo $batch_size; ?>" min="5" max="100">
    <?php
}

function avif_optimizer_settings_section_callback() {
    echo 'Configure your AVIF image optimization settings below.';
}

function avif_optimizer_settings_page() {
    ?>
    <div class="wrap">
        <h1>AVIF Image Optimizer</h1>
        
        <div class="card">
            <h2>Optimization Statistics</h2>
            <div id="avif-stats">
                <p>Loading statistics...</p>
            </div>
        </div>
        
        <form method="post" action="options.php">
            <?php
            settings_fields('avif_optimizer_settings_group');
            do_settings_sections('avif-image-optimizer');
            submit_button();
            ?>
        </form>
        
        <div class="card">
            <h2>Bulk Optimization</h2>
            <p>Click the button below to start optimizing all images in your media library.</p>
            <button id="bulk-optimize" class="button button-primary">Start Bulk Optimization</button>
            <div id="optimization-progress" style="margin-top: 20px; display: none;">
                <div class="progress-bar">
                    <div id="progress-fill" style="width: 0%; background-color: #0073aa; height: 20px;"></div>
                </div>
                <p id="progress-text">Processing...</p>
            </div>
        </div>
    </div>
    
    <script>
        jQuery(document).ready(function($) {
            // Load statistics
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'avif_get_stats'
                },
                success: function(response) {
                    $('#avif-stats').html(response);
                }
            });
            
            // Bulk optimization
            $('#bulk-optimize').on('click', function() {
                $('#optimization-progress').show();
                optimizeBatch(0);
            });
            
            function optimizeBatch(offset) {
                $.ajax({
                    url: ajaxurl,
                    type: 'POST',
                    data: {
                        action: 'avif_bulk_optimize',
                        offset: offset
                    },
                    success: function(response) {
                        if (response.success) {
                            const progress = response.data.progress;
                            $('#progress-fill').css('width', progress + '%');
                            $('#progress-text').text(response.data.message);
                            
                            if (progress < 100) {
                                optimizeBatch(response.data.offset);
                            } else {
                                setTimeout(function() {
                                    location.reload();
                                }, 2000);
                            }
                        }
                    }
                });
            }
        });
    </script>
    <?php
}

// AJAX handlers
add_action('wp_ajax_avif_get_stats', 'avif_get_stats');
function avif_get_stats() {
    global $wpdb;
    
    $total_images = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_mime_type LIKE 'image/%'");
    $optimized_images = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->postmeta WHERE meta_key = '_avif_generated'");
    $unoptimized = $total_images - $optimized_images;
    
    ob_start();
    ?>
    <p>Total images: <?php echo $total_images; ?></p>
    <p>Optimized images: <?php echo $optimized_images; ?></p>
    <p>Unoptimized images: <?php echo $unoptimized; ?></p>
    <?php
    $response = ob_get_clean();
    
    wp_send_json_success($response);
}

add_action('wp_ajax_avif_bulk_optimize', 'avif_bulk_optimize');
function avif_bulk_optimize() {
    $options = get_option('avif_optimizer_settings');
    $batch_size = isset($options['batch_size']) ? $options['batch_size'] : 20;
    $offset = isset($_POST['offset']) ? intval($_POST['offset']) : 0;
    
    $args = array(
        'post_type' => 'attachment',
        'post_mime_type' => 'image/*',
        'posts_per_page' => $batch_size,
        'offset' => $offset,
        'meta_query' => array(
            array(
                'key' => '_avif_generated',
                'compare' => 'NOT EXISTS'
            )
        )
    );
    
    $query = new WP_Query($args);
    $processed = 0;
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $attachment_id = get_the_ID();
            
            // Generate AVIF and WebP versions
            avif_generate_alternatives($attachment_id);
            $processed++;
        }
    }
    
    wp_reset_postdata();
    
    // Get total unoptimized count for progress calculation
    global $wpdb;
    $total_images = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_mime_type LIKE 'image/%'");
    $optimized_images = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->postmeta WHERE meta_key = '_avif_generated'");
    $unoptimized = $total_images - $optimized_images;
    
    if ($processed < $batch_size) {
        // All images processed
        wp_send_json_success(array(
            'progress' => 100,
            'message' => 'Optimization complete!',
            'offset' => $offset + $processed
        ));
    } else {
        // More images to process
        $progress = min(100, round(($optimized_images / $total_images) * 100));
        wp_send_json_success(array(
            'progress' => $progress,
            'message' => "Processed $optimized_images of $total_images images...",
            'offset' => $offset + $processed
        ));
    }
}

// Hook into new uploads
add_action('add_attachment', 'avif_process_new_attachment');

function avif_process_new_attachment($attachment_id) {
    // Only process images
    if (!wp_attachment_is_image($attachment_id)) {
        return;
    }
    
    avif_generate_alternatives($attachment_id);
}

function avif_generate_alternatives($attachment_id) {
    $options = get_option('avif_optimizer_settings');
    $enable_avif = isset($options['enable_avif']) ? $options['enable_avif'] : 1;
    $enable_webp = isset($options['enable_webp']) ? $options['enable_webp'] : 1;
    $compression = isset($options['compression_level']) ? $options['compression_level'] : 'balanced';
    
    // Get attachment metadata
    $metadata = wp_get_attachment_metadata($attachment_id);
    if (!$metadata) {
        return;
    }
    
    // Get file path
    $upload_dir = wp_upload_dir();
    $file_path = $upload_dir['basedir'] . '/' . $metadata['file'];
    
    // Check if file exists
    if (!file_exists($file_path)) {
        return;
    }
    
    // Generate AVIF if enabled
    if ($enable_avif) {
        avif_convert_to_avif($file_path, $compression);
    }
    
    // Generate WebP if enabled
    if ($enable_webp) {
        avif_convert_to_webp($file_path);
    }
    
    // Process all image sizes
    if (isset($metadata['sizes']) && is_array($metadata['sizes'])) {
        foreach ($metadata['sizes'] as $size => $size_data) {
            $size_file = dirname($file_path) . '/' . $size_data['file'];
            
            if (file_exists($size_file)) {
                if ($enable_avif) {
                    avif_convert_to_avif($size_file, $compression);
                }
                
                if ($enable_webp) {
                    avif_convert_to_webp($size_file);
                }
            }
        }
    }
    
    // Mark as processed
    update_post_meta($attachment_id, '_avif_generated', time());
}

function avif_convert_to_avif($file_path, $compression = 'balanced') {
    // Check if Imagick is available
    if (!extension_loaded('imagick')) {
        error_log('Imagick extension not available for AVIF conversion');
        return false;
    }
    
    try {
        $image = new Imagick($file_path);
        
        // Set compression quality based on setting
        switch ($compression) {
            case 'lossless':
                $image->setOption('avif:compression-level', 0);
                $image->setOption('avif:lossless', 'true');
                break;
            case 'balanced':
                $image->setOption('avif:compression-level', 50);
                $image->setOption('avif:lossless', 'false');
                break;
            case 'lossy':
                $image->setOption('avif:compression-level', 100);
                $image->setOption('avif:lossless', 'false');
                break;
        }
        
        // Get file info
        $path_info = pathinfo($file_path);
        $avif_path = $path_info['dirname'] . '/' . $path_info['filename'] . '.avif';
        
        // Convert and save
        $image->setImageFormat('avif');
        $image->writeImage($avif_path);
        $image->clear();
        
        return true;
    } catch (Exception $e) {
        error_log('AVIF conversion error: ' . $e->getMessage());
        return false;
    }
}

function avif_convert_to_webp($file_path) {
    // Check if GD is available
    if (!extension_loaded('gd')) {
        error_log('GD extension not available for WebP conversion');
        return false;
    }
    
    try {
        // Get file info
        $path_info = pathinfo($file_path);
        $webp_path = $path_info['dirname'] . '/' . $path_info['filename'] . '.webp';
        
        // Get image type
        $image_type = exif_imagetype($file_path);
        
        switch ($image_type) {
            case IMAGETYPE_JPEG:
                $image = imagecreatefromjpeg($file_path);
                break;
            case IMAGETYPE_PNG:
                $image = imagecreatefrompng($file_path);
                // Preserve transparency
                imagepalettetotruecolor($image);
                imagealphablending($image, true);
                imagesavealpha($image, true);
                break;
            case IMAGETYPE_GIF:
                $image = imagecreatefromgif($file_path);
                break;
            default:
                return false;
        }
        
        // Convert and save
        imagewebp($image, $webp_path, 85);
        imagedestroy($image);
        
        return true;
    } catch (Exception $e) {
        error_log('WebP conversion error: ' . $e->getMessage());
        return false;
    }
}

// Filter image output to use picture tags
add_filter('wp_get_attachment_image_attributes', 'avif_modify_image_attributes', 10, 3);
add_filter('post_thumbnail_html', 'avif_modify_thumbnail_html', 10, 5);

function avif_modify_image_attributes($attr, $attachment, $size) {
    // Only modify on frontend
    if (is_admin()) {
        return $attr;
    }
    
    // Get attachment metadata
    $metadata = wp_get_attachment_metadata($attachment->ID);
    if (!$metadata) {
        return $attr;
    }
    
    // Check if AVIF was generated
    $avif_generated = get_post_meta($attachment->ID, '_avif_generated', true);
    if (!$avif_generated) {
        return $attr;
    }
    
    // Get upload directory
    $upload_dir = wp_upload_dir();
    
    // Get original file URL
    if (isset($attr['src'])) {
        $original_url = $attr['src'];
    } else {
        $original_url = wp_get_attachment_image_url($attachment->ID, $size);
    }
    
    if (!$original_url) {
        return $attr;
    }
    
    // Get file path from URL
    $file_path = str_replace($upload_dir['baseurl'], $upload_dir['basedir'], $original_url);
    $path_info = pathinfo($file_path);
    
    // Create AVIF and WebP URLs
    $avif_url = $upload_dir['baseurl'] . '/' . $path_info['dirname'] . '/' . $path_info['filename'] . '.avif';
    $webp_url = $upload_dir['baseurl'] . '/' . $path_info['dirname'] . '/' . $path_info['filename'] . '.webp';
    
    // Check if files exist
    $avif_exists = file_exists($path_info['dirname'] . '/' . $path_info['filename'] . '.avif');
    $webp_exists = file_exists($path_info['dirname'] . '/' . $path_info['filename'] . '.webp');
    
    // Store original attributes for later use
    $attr['data-original-src'] = $attr['src'];
    $attr['data-original-srcset'] = isset($attr['srcset']) ? $attr['srcset'] : '';
    $attr['data-original-sizes'] = isset($attr['sizes']) ? $attr['sizes'] : '';
    
    // Set new attributes
    if ($avif_exists) {
        $attr['data-avif-src'] = $avif_url;
    }
    
    if ($webp_exists) {
        $attr['data-webp-src'] = $webp_url;
    }
    
    return $attr;
}

function avif_modify_thumbnail_html($html, $post_id, $post_thumbnail_id, $size, $attr) {
    // Only modify on frontend
    if (is_admin()) {
        return $html;
    }
    
    // Check if AVIF was generated
    $avif_generated = get_post_meta($post_thumbnail_id, '_avif_generated', true);
    if (!$avif_generated) {
        return $html;
    }
    
    // Get upload directory
    $upload_dir = wp_upload_dir();
    
    // Get original file URL
    $original_url = wp_get_attachment_image_url($post_thumbnail_id, $size);
    if (!$original_url) {
        return $html;
    }
    
    // Get file path from URL
    $file_path = str_replace($upload_dir['baseurl'], $upload_dir['basedir'], $original_url);
    $path_info = pathinfo($file_path);
    
    // Create AVIF and WebP URLs
    $avif_url = $upload_dir['baseurl'] . '/' . $path_info['dirname'] . '/' . $path_info['filename'] . '.avif';
    $webp_url = $upload_dir['baseurl'] . '/' . $path_info['dirname'] . '/' . $path_info['filename'] . '.webp';
    
    // Check if files exist
    $avif_exists = file_exists($path_info['dirname'] . '/' . $path_info['filename'] . '.avif');
    $webp_exists = file_exists($path_info['dirname'] . '/' . $path_info['filename'] . '.webp');
    
    if (!$avif_exists && !$webp_exists) {
        return $html;
    }
    
    // Extract img attributes
    $img_pattern = '/<img([^>]*)>/';
    preg_match($img_pattern, $html, $img_matches);
    
    if (empty($img_matches)) {
        return $html;
    }
    
    $img_attributes = $img_matches[1];
    
    // Build picture tag
    $picture_html = '<picture>';
    
    if ($avif_exists) {
        $picture_html .= '<source srcset="' . esc_url($avif_url) . '" type="image/avif">';
    }
    
    if ($webp_exists) {
        $picture_html .= '<source srcset="' . esc_url($webp_url) . '" type="image/webp">';
    }
    
    $picture_html .= '<img' . $img_attributes . '>';
    $picture_html .= '</picture>';
    
    return $picture_html;
}

// Add JavaScript to handle dynamic images (like in WooCommerce galleries)
add_action('wp_footer', 'avif_add_frontend_script');
function avif_add_frontend_script() {
    ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Function to convert img tags with data attributes to picture tags
        function convertImagesToPicture() {
            const images = document.querySelectorAll('img[data-avif-src], img[data-webp-src]');
            
            images.forEach(function(img) {
                // Skip if already in a picture tag
                if (img.parentNode.tagName === 'PICTURE') {
                    return;
                }
                
                const avifSrc = img.getAttribute('data-avif-src');
                const webpSrc = img.getAttribute('data-webp-src');
                
                if (!avifSrc && !webpSrc) {
                    return;
                }
                
                // Create picture element
                const picture = document.createElement('picture');
                
                // Add AVIF source if available
                if (avifSrc) {
                    const avifSource = document.createElement('source');
                    avifSource.setAttribute('srcset', avifSrc);
                    avifSource.setAttribute('type', 'image/avif');
                    picture.appendChild(avifSource);
                }
                
                // Add WebP source if available
                if (webpSrc) {
                    const webpSource = document.createElement('source');
                    webpSource.setAttribute('srcset', webpSrc);
                    webpSource.setAttribute('type', 'image/webp');
                    picture.appendChild(webpSource);
                }
                
                // Clone the original img
                const imgClone = img.cloneNode(true);
                
                // Remove data attributes
                imgClone.removeAttribute('data-avif-src');
                imgClone.removeAttribute('data-webp-src');
                imgClone.removeAttribute('data-original-src');
                imgClone.removeAttribute('data-original-srcset');
                imgClone.removeAttribute('data-original-sizes');
                
                // Add img to picture
                picture.appendChild(imgClone);
                
                // Replace original img with picture
                img.parentNode.replaceChild(picture, img);
            });
        }
        
        // Run on page load
        convertImagesToPicture();
        
        // Run after AJAX requests (for WooCommerce galleries, etc.)
        if (typeof MutationObserver !== 'undefined') {
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes.length) {
                        convertImagesToPicture();
                    }
                });
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
