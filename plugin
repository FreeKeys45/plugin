<?php
/*
Plugin Name: Product Reviews
Description: Theme-proof WooCommerce review enhancements with full names (even for logged-in users), default template override, styled submission form, and dedicated admin menu.
Author: Sabir Shah
Version: 2.3.3
License: GPLv2 or later
*/

if (!defined('ABSPATH')) exit;

if (!class_exists('SS_Product_Reviews_Override')) {

    class SS_Product_Reviews_Override {

        public function __construct() {
            add_action('plugins_loaded', [$this, 'init']);
        }

        public function init() {
            if (!class_exists('WooCommerce')) return;
            $this->hooks();
        }

        private function hooks() {
            add_filter('comments_open', [$this, 'force_product_comments_open'], 10, 2);
            add_filter('woocommerce_product_tabs', [$this, 'force_default_reviews_template'], 1000);
            add_action('woocommerce_single_product_summary', [$this, 'rating_and_cta_under_title'], 6);
            add_action('woocommerce_shop_loop_item_title', [$this, 'rating_below_archive_title'], 11);

            // Build the form in a WooCommerce-native way (works across themes)
            add_filter('woocommerce_product_review_comment_form_args', [$this, 'woo_review_form_args'], 20);
            // Make sure defaults are still clean if WC falls back
            add_filter('comment_form_defaults', [$this, 'custom_review_form_fallback'], 20);

            // Show Full Name + Email even for logged-in users
            add_action('comment_form_logged_in_after', [$this, 'add_logged_in_fields']);

            // Persist Full Name/Email into the comment before insert
            add_filter('preprocess_comment', [$this, 'persist_full_name_email'], 20);

            add_filter('get_comment_author', [$this, 'show_full_reviewer_name'], 10, 3);

            add_action('admin_menu', [$this, 'add_product_reviews_menu']);
            add_action('wp_enqueue_scripts', [$this, 'enqueue_front_js']);
            add_action('wp_head', [$this, 'inject_inline_styles']);
        }

        public function force_product_comments_open($open, $post_id) {
            return (get_post_type($post_id) === 'product') ? true : $open;
        }

        public function force_default_reviews_template($tabs) {
            if (isset($tabs['reviews'])) {
                $product_id = get_the_ID();
                $product    = $product_id ? wc_get_product($product_id) : false;
                $count      = $product ? (int) $product->get_review_count() : 0;

                $tabs['reviews']['title'] = sprintf(
                    _n('Reviews (%s)', 'Reviews (%s)', $count, 'product-reviews'),
                    number_format_i18n($count)
                );
                $tabs['reviews']['callback'] = [$this, 'load_default_reviews_template'];
            }
            return $tabs;
        }

        public function load_default_reviews_template() {
            if (function_exists('WC')) {
                wc_get_template('single-product-reviews.php', [], '', WC()->plugin_path() . '/templates/');
            }
        }

        public function rating_and_cta_under_title() {
            if (!function_exists('is_product') || !is_product()) return;

            global $product;
            if (!$product instanceof WC_Product) return;

            echo '<div class="pr-rating-cta" style="display:flex;align-items:center;gap:.75rem;flex-wrap:wrap;margin:.25rem 0 1rem;">';

            if (function_exists('wc_review_ratings_enabled') && wc_review_ratings_enabled()) {
                $rating_count = (int) $product->get_rating_count();
                $average      = $product->get_average_rating();
                if ($rating_count > 0) {
                    echo wc_get_rating_html($average, $rating_count);
                    echo '<span style="font-size:.9em;color:#555;">'
                        . esc_html(sprintf(_n('%s review', '%s reviews', $rating_count, 'product-reviews'), number_format_i18n($rating_count)))
                        . '</span>';
                } else {
                    echo '<span style="font-size:.95em;color:#555;">' . esc_html__('No reviews yet', 'product-reviews') . '</span>';
                }
            }

            echo '<a href="#review_form" class="button pr-write-review" style="margin-left:0;">'
                . esc_html__('Write a review', 'product-reviews')
                . '</a>';

            echo '</div>';
        }

        public function rating_below_archive_title() {
            global $product;
            if (!$product instanceof WC_Product) return;

            if (function_exists('wc_review_ratings_enabled') && wc_review_ratings_enabled()) {
                $rating_count = (int) $product->get_rating_count();
                $average      = $product->get_average_rating();

                echo '<div class="pr-rating-summary" style="margin:0.25rem 0 0.75rem;">';
                if ($rating_count > 0) {
                    echo wc_get_rating_html($average, $rating_count);
                    echo '<span style="font-size:0.9em;color:#555;margin-left:0.5rem;">'
                        . esc_html(sprintf(_n('%s review', '%s reviews', $rating_count, 'product-reviews'), number_format_i18n($rating_count)))
                        . '</span>';
                } else {
                    echo '<span style="font-size:0.9em;color:#777;">' . esc_html__('No reviews yet', 'product-reviews') . '</span>';
                }
                echo '</div>';
            }
        }

        // Preferred hook: tells WooCommerce exactly how the review form should look
        public function woo_review_form_args($args) {
            if (!function_exists('is_product') || !is_product()) return $args;

            // Base
            $args['title_reply']  = esc_html__('Write a Review', 'product-reviews');
            $args['label_submit'] = esc_html__('Submit Review', 'product-reviews');
            $args['class_form']   = isset($args['class_form'])
                ? trim($args['class_form'] . ' pr-review-form')
                : 'pr-review-form';

            // Guest fields (WordPress hides for logged-in; we add those separately)
            $args['fields']['author'] = '
                <div class="pr-form-group">
                    <label for="author">' . esc_html__('Full Name', 'product-reviews') . '</label>
                    <input id="author" name="author" type="text" required class="pr-input" />
                </div>';

            $args['fields']['email'] = '
                <div class="pr-form-group">
                    <label for="email">' . esc_html__('Email', 'product-reviews') . '</label>
                    <input id="email" name="email" type="email" required class="pr-input" />
                </div>';

            // Rating + Comment
            $args['comment_field'] = '
                <div class="pr-form-group">
                    <label for="rating">' . esc_html__('Your Rating', 'product-reviews') . '</label>
                    <select name="rating" id="rating" required class="pr-select">
                        <option value="">' . esc_html__('Rate…', 'product-reviews') . '</option>
                        <option value="5">★★★★★</option>
                        <option value="4">★★★★☆</option>
                        <option value="3">★★★☆☆</option>
                        <option value="2">★★☆☆☆</option>
                        <option value="1">★☆☆☆☆</option>
                    </select>
                </div>
                <div class="pr-form-group">
                    <label for="comment">' . esc_html__('Your Review', 'product-reviews') . '</label>
                    <textarea id="comment" name="comment" rows="5" required class="pr-textarea"></textarea>
                </div>';

            // Clean up noise
            $args['comment_notes_before'] = '';
            $args['comment_notes_after']  = '';

            return $args;
        }

        // Fallback if a theme bypasses the WC-specific filter
        public function custom_review_form_fallback($defaults) {
            if (!function_exists('is_product') || !is_product()) return $defaults;

            $defaults['title_reply']  = esc_html__('Write a Review', 'product-reviews');
            $defaults['label_submit'] = esc_html__('Submit Review', 'product-reviews');
            $defaults['class_form']   = isset($defaults['class_form'])
                ? trim($defaults['class_form'] . ' pr-review-form')
                : 'pr-review-form';

            $defaults['fields']['author'] = '
                <div class="pr-form-group">
                    <label for="author">' . esc_html__('Full Name', 'product-reviews') . '</label>
                    <input id="author" name="author" type="text" required class="pr-input" />
                </div>';

            $defaults['fields']['email'] = '
                <div class="pr-form-group">
                    <label for="email">' . esc_html__('Email', 'product-reviews') . '</label>
                    <input id="email" name="email" type="email" required class="pr-input" />
                </div>';

            $defaults['comment_field'] = '
                <div class="pr-form-group">
                    <label for="rating">' . esc_html__('Your Rating', 'product-reviews') . '</label>
                    <select name="rating" id="rating" required class="pr-select">
                        <option value="">' . esc_html__('Rate…', 'product-reviews') . '</option>
                        <option value="5">★★★★★</option>
                        <option value="4">★★★★☆</option>
                        <option value="3">★★★☆☆</option>
                        <option value="2">★★☆☆☆</option>
                        <option value="1">★☆☆☆☆</option>
                    </select>
                </div>
                <div class="pr-form-group">
                    <label for="comment">' . esc_html__('Your Review', 'product-reviews') . '</label>
                    <textarea id="comment" name="comment" rows="5" required class="pr-textarea"></textarea>
                </div>';

            return $defaults;
        }

        // Show Full Name + Email even when logged in (WordPress hides author/email by default)
        public function add_logged_in_fields() {
            if (!function_exists('is_product') || !is_product()) return;

            $user = wp_get_current_user();
            $full_prefill = $user && $user->exists() ? esc_attr($user->display_name) : '';
            $email_prefill = $user && $user->exists() ? esc_attr($user->user_email) : '';

            echo '
            <div class="pr-form-group">
                <label for="pr_full_name">' . esc_html__('Full Name', 'product-reviews') . '</label>
                <input id="pr_full_name" name="pr_full_name" type="text" value="' . $full_prefill . '" required class="pr-input" />
            </div>
            <div class="pr-form-group">
                <label for="pr_email">' . esc_html__('Email', 'product-reviews') . '</label>
                <input id="pr_email" name="pr_email" type="email" value="' . $email_prefill . '" required class="pr-input" />
            </div>';
        }

        // Persist the posted Full Name/Email into the comment fields prior to insert
        public function persist_full_name_email($commentdata) {
            // Only for product reviews
            $post_id = isset($commentdata['comment_post_ID']) ? (int) $commentdata['comment_post_ID'] : 0;
            if ($post_id <= 0 || get_post_type($post_id) !== 'product') {
                return $commentdata;
            }

            // Prefer explicit Full Name fields if provided
            $full = '';
            if (isset($_POST['author']) && $_POST['author'] !== '') {
                $full = sanitize_text_field(wp_unslash($_POST['author']));
            } elseif (isset($_POST['pr_full_name']) && $_POST['pr_full_name'] !== '') {
                $full = sanitize_text_field(wp_unslash($_POST['pr_full_name']));
            }

            $email = '';
            if (isset($_POST['email']) && $_POST['email'] !== '') {
                $email = sanitize_email(wp_unslash($_POST['email']));
            } elseif (isset($_POST['pr_email']) && $_POST['pr_email'] !== '') {
                $email = sanitize_email(wp_unslash($_POST['pr_email']));
            }

            if ($full !== '') {
                $commentdata['comment_author'] = $full;
            }
            if ($email !== '') {
                $commentdata['comment_author_email'] = $email;
            }

            return $commentdata;
        }

        // Preserve order-based full names if present; otherwise fallback
        public function show_full_reviewer_name($author, $comment_ID, $comment = null) {
            if (!$comment || !is_object($comment)) {
                $comment = get_comment($comment_ID);
            }
            if (!$comment || is_wp_error($comment)) return $author;

            // Use stored comment author's name if we set it via persist_full_name_email()
            $stored = trim((string) $comment->comment_author);
            if ($stored !== '') return esc_html($stored);

            // Otherwise allow order-derived full names if available
            if (!empty($comment->comment_type) && $comment->comment_type === 'review') {
                $order_id = get_comment_meta($comment->comment_ID, 'order_id', true);
                if ($order_id) {
                    $first = get_post_meta((int) $order_id, '_billing_first_name', true);
                    $last  = get_post_meta((int) $order_id, '_billing_last_name', true);
                    $full  = trim(trim((string) $first) . ' ' . trim((string) $last));
                    if ($full !== '') return esc_html($full);
                }
            }
            return $author;
        }

        public function add_product_reviews_menu() {
            global $wpdb;
            $pending_reviews = 0;
            if ($wpdb instanceof wpdb) {
                $pending_reviews = (int) $wpdb->get_var(
                    "SELECT COUNT(*) FROM {$wpdb->comments} WHERE comment_approved = '0' AND comment_type = 'review'"
                );
            }

            $menu_title = esc_html__('Product Reviews', 'product-reviews');
            if ($pending_reviews > 0) {
                $menu_title .= sprintf(' <span class="awaiting-mod">%d</span>', $pending_reviews);
            }

            add_menu_page(
                esc_html__('Product Reviews', 'product-reviews'),
                $menu_title,
                'moderate_comments',
                'ss-product-reviews',
                [$this, 'redirect_to_reviews_screen'],
                'dashicons-star-filled',
                26
            );
        }

        public function redirect_to_reviews_screen() {
            if (!current_user_can('moderate_comments')) {
                wp_die(esc_html__('You do not have permission to access this page.', 'product-reviews'));
            }
            wp_safe_redirect(admin_url('edit-comments.php?comment_type=review'));
            exit;
        }

        public function enqueue_front_js() {
            if (!function_exists('is_product') || !is_product()) return;
            $handle = 'pr-review-scroll';
            $src    = plugin_dir_url(__FILE__) . 'assets/js/review-scroll.js';
            wp_register_script($handle, $src, ['jquery'], '1.0.0', true);
            wp_enqueue_script($handle);
        }

        public function inject_inline_styles() {
            if (!function_exists('is_product') || !is_product()) return;

            echo '<style>
                .pr-review-form { max-width: 640px; margin-top: 2rem; }
                .pr-form-group { margin-bottom: 1.25rem; }
                .pr-form-group label { display: block; font-weight: 600; margin-bottom: 0.5rem; }
                .pr-input, .pr-select, .pr-textarea {
                    width: 100%;
                    padding: 0.75rem;
                    border: 1px solid #cfcfcf;
                    border-radius: 4px;
                    font-size: 1rem;
                    background: #fff;
                }
                .pr-select { height: 2.5rem; }
                .pr-textarea { resize: vertical; min-height: 140px; }
                .pr-rating-cta .star-rating { transform: translateY(-1px); }
            </style>';
        }
    }

    new SS_Product_Reviews_Override();
}
